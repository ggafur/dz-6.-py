# Дан список: ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха',
# 'была', '+5', 'градусов']
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем)
# кавычками (добавить кавычку до и кавычку после элемента списка, являющегося числом)
# и дополнить нулём до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха',
# 'была', '"', '+05', '"', 'градусов']
# x = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']


# def get_sign(x): # поиск знаков +-
#     if x[0] in '+-':
#         return x[0]
#
# arr = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
# i = 0
# while i < len(arr):
#     sign = get_sign(arr[i])
#     if arr[i].isdigit() or (sign and arr[i][1:].isdigit()): # проверка является ли числом или знаком +- с числом
#         if sign: # если в числе +-
#             arr[i] = sign + arr[i][1:].zfill(2)
#         else:
#             arr[i] = arr[i].zfill(2) # добавляет 0 перед числом 2 общее количество знаков
#
#         arr.insert(i, '"') # добовляет элемент перед i
#         arr.insert(i + 2, '"')
#         i += 2
#
#     i += 1
#
# print(arr)

# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
# separator = " "
# print(separator.join(arr))


# ==============================================================================================
# Дан список, содержащий искажённые данные с должностями и именами сотрудников:
# ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй',
# 'директор аэлита']
# Известно, что имя сотрудника всегда в конце строки. Сформировать и вывести на экран фразы вида:
# 'Привет, Игорь!' Подумать, как получить имена сотрудников из элементов списка, как привести их к
# корректному виду. Можно ли при этом не создавать новый список?

# arr = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']
# for item in arr:
#     new_arr=item.split(' ')
#     print(f'Привет {new_arr[-1].capitalize()}')

# ============================================================================
# 5. Создать список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
# Вывести на экран эти цены через запятую в одну строку, цена должна отображаться
# в виде <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
# Вывести цены, отсортированные по возрастанию, новый список не создавать
# (доказать, что объект списка после сортировки остался тот же).
# Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию,
# написав минимум кода?
import random

def sort_max(s_list):
    for i in range(len(s_list)-1):
        for j in range(len(s_list)-i-1):
            if s_list[j] > s_list[j+1]:
                s_list[j], s_list[j+1] = s_list[j+1], s_list[j]
    return s_list

def sort_min(s_list):
    for i in range(len(s_list)-1):
        for j in range(len(s_list)-i-1):
            if s_list[j] < s_list[j+1]:
                s_list[j], s_list[j+1] = s_list[j+1], s_list[j]
    return s_list

def add_rk(s_list):
    for i in  range(len(s_list)):
        s_list[i] = str(s_list[i]).split('.')

        s_list[i][0] = f'{s_list[i][0]} руб. '
        if len(s_list[i][1])==1:
            s_list[i][1] = f'{s_list[i][1]}0 коп.'
        else:
            s_list[i][1] = f'{s_list[i][1]} коп.'
        s_list[i] = s_list[i][0]+s_list[i][1]
    return s_list

def return_top(s_list, numb):
    return s_list[: numb]


price_list = [round(random.uniform(0,9),2) for i in range(20)]
max_l = sort_max(price_list)
print(max_l)
rub_max_l = add_rk(max_l)
print(rub_max_l)
print(return_top(rub_max_l, 5))
min_l = sort_min(price_list)
print(min_l)
rub_min_l = min_l
print(return_top(rub_min_l, 5))
